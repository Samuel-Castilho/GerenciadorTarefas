@using System;
@using Blazored.FluentValidation
@using GerenciadorTarefas.Client.Models

<div class="page-container">
    <button class="btn-primary" style="border : 2px solid black" @onclick="OpenDialogCreate">Adicionar Tarefa</button>

    @if (openDialog)
    {
        <div class="dialog-overlay" @onclick="FecharDialog">
            <div class="dialog-container" @onclick:stopPropagation="true">
                <div class="dialog-header">
                    <h2>@(Tarefa.Id > 0 ? "Editar" : "Nova") Tarefa</h2>
                    <button class="btn-close" @onclick="FecharDialog">×</button>
                </div>

                <div class="dialog-content">
                    <EditForm Model="Tarefa" OnValidSubmit="SalvarTarefa">
                        <FluentValidationValidator />
                        <ValidationSummary />

                        <div class="form-container">
                            <div class="form-column">
                                <div class="form-group">
                                    <label for="titulo">Título</label>
                                    <InputText id="titulo" @bind-Value="Tarefa.Titulo" class="form-control" placeholder="Digite o título da tarefa" />
                                    <ValidationMessage For="@(() => Tarefa.Titulo)" />
                                </div>

                                <div class="form-group">
                                    <label for="descricao">Descrição</label>
                                    <InputTextArea id="descricao" @bind-Value="Tarefa.Descricao" class="form-control" rows="4" placeholder="Descreva a tarefa" />
                                    <ValidationMessage For="@(() => Tarefa.Descricao)" />
                                </div>
                            </div>

                            <div class="form-column">
                                <div class="form-group">
                                    <label for="status">Status</label>
                                    <InputSelect id="status" ValueExpression="@(()=> Tarefa.Status)" TValue="ETarefaStatus" Value="@Tarefa.Status" ValueChanged="@((arg)=> StatusChanged(arg))" class="form-control">

                                        <option checked="@(Tarefa.Status == ETarefaStatus.Pendente)" value="@ETarefaStatus.Pendente">Pendente</option>
                                        <option checked="@(Tarefa.Status == ETarefaStatus.EmProgresso)" value ="@ETarefaStatus.EmProgresso">Em progresso</option>
                                        <option checked="@(Tarefa.Status == ETarefaStatus.Concluida)" value="@ETarefaStatus.Concluida">Concluída</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => Tarefa.Status)" />
                                </div>

                                <div class="form-group">
                                    <label for="dataCriacao">Data de criação</label>
                                    <InputDate id="dataCriacao" @bind-Value="Tarefa.DataCriacao" class="form-control" />
                                    <ValidationMessage For="@(() => Tarefa.DataCriacao)" />
                                </div>

                                @if (Tarefa.Status == ETarefaStatus.Concluida)
                                {
                                    <div class="form-group">
                                        <label for="dataConclusao">Data de conclusão</label>
                                        <InputDate id="dataConclusao" @bind-Value="Tarefa.DataConclusao" class="form-control"/>
                                        <ValidationMessage For="@(() => Tarefa.DataConclusao)" />
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="dialog-footer">
                            <button type="button" class="btn-secondary" @onclick="FecharDialog">Cancelar</button>
                            <button type="submit" class="btn-primary">Salvar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

<style>

</style>

@code {
    private bool openDialog = false;

    [Parameter]
    public EventCallback<IEnumerable<TarefaViewModel>> CreateTarefaAsync { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<TarefaViewModel>> UpdateTarefaAsync { get; set; }

    public TarefaViewModel Tarefa { get; set; }

    const char createMode = 'C';
    const char editMode = 'E';
    char mode = 'C';

    private void OpenDialogCreate()
    {
        mode = createMode;
        Tarefa = new TarefaViewModel
            {
                DataCriacao = DateTime.Now
            };
        openDialog = true;
    }

    public void OpenDialogEdit(TarefaViewModel tarefa)
    {
        mode = editMode;
        Tarefa = new TarefaViewModel
            {
                Id = tarefa.Id,
                Titulo = tarefa.Titulo,
                Descricao = tarefa.Descricao,
                Status = tarefa.Status,
                DataCriacao = tarefa.DataCriacao,
                DataConclusao = tarefa.DataConclusao,
            };
        openDialog = true;

    }


    private void FecharDialog()
    {
        openDialog = false;
    }

    private async Task SalvarTarefa()
    {
        if(mode == createMode)
        {
            await CreateTarefaAsync.InvokeAsync([Tarefa]);
        }
        else
        {
            await UpdateTarefaAsync.InvokeAsync([Tarefa]);
        }
        openDialog = false;
    }


    private void StatusChanged(ETarefaStatus arg)
    {
        Tarefa.Status = arg;
        if (Tarefa.Status != ETarefaStatus.Concluida)
        {
            Tarefa.DataConclusao = null;
        }
    }

}